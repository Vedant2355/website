"use strict";
var adsbygoogle = window.adsbygoogle || []
  , vanilla = {
    isAndroid: !!navigator.userAgent.match(/Android/i),
    screenWidth: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
    init: function() {
        window.requestAnimationFrame(this.places),
        window.requestAnimationFrame(this.available),
        window.requestAnimationFrame(this.flyers),
        window.requestAnimationFrame(this.maps),
        window.requestAnimationFrame(this.worldmap),
        window.requestAnimationFrame(this.lazyimages),
        window.requestAnimationFrame(this.nearby),
        window.requestAnimationFrame(this.chart),
        window.requestAnimationFrame(this.getyourguide)
    },
    loadJS: function(e, t) {
        var a = window.document.createElement("script");
        return a.src = e,
        a.async = !0,
        a.setAttribute("fetchpriority", "low"),
        document.body.appendChild(a),
        t && "function" == typeof t && (a.onload = t),
        a
    },
    loadCSS: function(e) {
        var t = document.createElement("link");
        t.rel = "stylesheet",
        t.type = "text/css",
        t.href = e,
        t.setAttribute("fetchpriority", "low"),
        document.getElementsByTagName("head")[0].appendChild(t)
    },
    shuffle: function(e) {
        for (var t = e.length - 1; t > 0; t--) {
            var a = Math.floor(Math.random() * (t + 1))
              , n = e[t];
            e[t] = e[a],
            e[a] = n
        }
        return e
    },
    lazyimages: function() {
        var e = [].slice.call(document.querySelectorAll("img[data-src]"));
        if ("IntersectionObserver"in window)
            for (var t = new IntersectionObserver((function(e, t) {
                for (var a = 0; a < e.length; a++)
                    e[a].isIntersecting && (e[a].target.setAttribute("src", e[a].target.getAttribute("data-src")),
                    e[a].target.removeAttribute("data-src"),
                    t.unobserve(e[a].target))
            }
            ),{
                root: null,
                rootMargin: "0px",
                threshold: 0
            }), a = 0; a < e.length; a++)
                t.observe(e[a]);
        else
            for (a = 0; a < e.length; a++)
                e[a].setAttribute("src", e[a].getAttribute("data-src")),
                e[a].removeAttribute("data-src")
    },
    loading: function(e) {
        var t = document.getElementById("loading");
        t || ((t = document.createElement("div")).id = "loading",
        t.className = "loading",
        t.innerText = "Loading",
        document.body.appendChild(t)),
        t.style.display = e ? "block" : "none"
    },
    flyers: function() {
        var e = document.getElementsByClassName("flyer");
        if (e.length > 0)
            for (var t = 0, a = e.length; t < a; t++)
                e[t].offsetHeight && (e[t].innerHTML = '<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-7704978023988513" data-ad-slot="4923357589" data-ad-format="auto" data-full-width-responsive="true"></ins>',
                (adsbygoogle = window.adsbygoogle || []).push({}));
        var n = document.getElementsByClassName("rio");
        if (n.length > 0 && vanilla.screenWidth > 1280) {
            var o = '<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-7704978023988513" data-ad-slot="3441183845"></ins>';
            n[0] && (n[0].innerHTML = o,
            (adsbygoogle = window.adsbygoogle || []).push({})),
            n[1] && (n[1].innerHTML = o,
            (adsbygoogle = window.adsbygoogle || []).push({}))
        }
        if (e.length > 0) {
            var i = document.createElement("script");
            i.src = "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-7704978023988513",
            i.async = !0,
            i.setAttribute("crossorigin", "anonymous"),
            document.head.appendChild(i)
        }
    },
    places: function() {
        var e = document.getElementById("pickup")
          , t = document.getElementById("dropoff")
          , a = document.getElementById("getfare")
          , n = {};
        if (!e || !t)
            return !1;
        function o() {
            e.removeEventListener("keyup", o),
            t.removeEventListener("keyup", o),
            vanilla.loadCSS("/css/auto-complete.css"),
            vanilla.loadJS("/js/auto-complete.min.js", (function() {
                new autoComplete({
                    selector: e,
                    minChars: 3,
                    cache: !1,
                    delay: 400,
                    source: i,
                    renderItem: r,
                    onSelect: function(t, a, o) {
                        n.pickup_name = o.getAttribute("data-name"),
                        n.pickup_geo = o.getAttribute("data-geo"),
                        e.value = n.pickup_name
                    }
                }),
                new autoComplete({
                    selector: t,
                    minChars: 3,
                    cache: !1,
                    delay: 400,
                    source: i,
                    renderItem: r,
                    onSelect: function(e, a, o) {
                        n.dropoff_name = o.getAttribute("data-name"),
                        n.dropoff_geo = o.getAttribute("data-geo"),
                        t.value = n.dropoff_name
                    }
                })
            }
            ))
        }
        e.addEventListener("focus", o, !1),
        t.addEventListener("focus", o, !1);
        var i = function(e, t) {
            fetch("https://uberestimate.net/api/places?q=" + encodeURIComponent(e)).then((e=>e.json())).then((e=>t(e))).catch((e=>console.error(e)))
        }
          , r = function(e, t) {
            return '<div class="autocomplete-suggestion" data-name="' + e.name + '" data-geo="' + e.lat + "," + e.lon + '">' + e.full + "</div>"
        };
        a.addEventListener("click", (function(e) {
            return e.preventDefault(),
            vanilla.loading(!0),
            a.disabled = !0,
            n ? n.pickup_geo ? n.dropoff_geo ? void fetch("https://uberestimate.net/api/routes", {
                method: "POST",
                headers: {
                    Accept: "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(n)
            }).then((e=>e.json())).then((e=>{
                alert("KUCH")
                window.location.href = "/route/" + e.slug
            }
            )).catch((e=>{
                alert("Error, please try again later."),
                a.disabled = !1,
                vanilla.loading(!1)
            }
            )) : (cb("Missing dropoff location"),
            !1) : (cb("Missing pickup location"),
            !1) : (alert("Missing route"),
            !1)
        }
        ))
    },
    available: function() {
        var e = document.getElementById("avbl");
        if (!e)
            return !1;
        var t = e.querySelector("input[type=submit]")
          , a = document.getElementById("city");
        a.addEventListener("focus", (function() {
            vanilla.loadCSS("/css/auto-complete.css"),
            vanilla.loadJS("/js/auto-complete.min.js", (function() {
                new autoComplete({
                    selector: a,
                    minChars: 3,
                    cache: !1,
                    delay: 200,
                    source: function(e, t) {
                        e = e.toLowerCase(),
                        fetch("https://api.nohrgroup.com/api/places?q=" + e).then((e=>e.json())).then((e=>{
                            t(e)
                        }
                        )).catch((e=>{
                            alert("The service is not responding")
                        }
                        ))
                    },
                    renderItem: function(e, t) {
                        t = t.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
                        var a = new RegExp("(" + t.split(" ").join("|") + ")","gi")
                          , n = e.name.replace(a, "<b>$1</b>") + (e.state ? ", " + e.state : "") + (e.country ? ", " + e.country : "");
                        return '<div class="autocomplete-suggestion" data-name="' + e.name + '" data-state="' + e.state + '" data-country="' + e.country + '" data-lat="' + e.lat + '" data-lon="' + e.lon + '">' + n + "</div>"
                    },
                    onSelect: function(e, a, n) {
                        e.preventDefault(),
                        vanilla.loading(!0),
                        t.disabled = !0;
                        var o = {
                            name: n.getAttribute("data-name"),
                            state: n.getAttribute("data-state"),
                            country: n.getAttribute("data-country"),
                            geo: {
                                lat: n.getAttribute("data-lat"),
                                lon: n.getAttribute("data-lon")
                            }
                        };
                        fetch("/api/available", {
                            method: "POST",
                            headers: {
                                Accept: "application/json",
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(o)
                        }).then((e=>e.json())).then((e=>{
                            e.slug && (window.location.href = "/available/" + e.slug)
                        }
                        )).catch((e=>{
                            alert("Error, please try again later."),
                            t.disabled = !1,
                            vanilla.loading(!1)
                        }
                        ))
                    }
                })
            }
            ))
        }
        ), {
            once: !0
        }),
        t.addEventListener("click", (function(e) {
            e.preventDefault(),
            alert("Search and select a city in the field above")
        }
        ))
    },
    maps: function() {
        var e = document.getElementById("map");
        if (!e)
            return !1;
        if ("IntersectionObserver"in window) {
            var t = new IntersectionObserver((function(e, n) {
                e.length > 0 && e[0].isIntersecting && (a(),
                t.disconnect())
            }
            ),{
                root: null,
                rootMargin: "0px",
                threshold: 0
            });
            t.observe(e)
        } else
            a();
        var a = function() {
            vanilla.loadCSS("/css/leaflet.css"),
            vanilla.loadJS("/js/leaflet.js", (function() {
                var t = e.getAttribute("data-pickup").split(",")
                  , a = e.getAttribute("data-dropoff").split(",")
                  , n = L.icon({
                    iconUrl: "/img/taxi.svg",
                    iconSize: [32, 32],
                    iconAnchor: [16, 16],
                    popupAnchor: [0, -10]
                })
                  , o = L.map(e, {
                    scrollWheelZoom: !1,
                    zoomSnap: .1,
                    zoomAnimation: !1
                }).setView([t[0], t[1]], 13);
                L.tileLayer("https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.{ext}", {
                    attribution: '<a href="http://stamen.com" rel="nofollow">Stamen Design</a> &amp; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                    subdomains: "abcd",
                    minZoom: 0,
                    maxZoom: 16,
                    ext: "png"
                }).addTo(o);
                var i = [[t[0], t[1]], [a[0], a[1]]];
                L.polyline(i, {
                    color: "#FFC043"
                }).addTo(o),
                L.marker(i[0], {
                    title: "Start",
                    icon: n
                }).addTo(o),
                L.marker(i[1], {
                    title: "Stop",
                    icon: n
                }).addTo(o),
                o.fitBounds(i, {
                    padding: [0, 50]
                }),
                "string" == typeof carRoute && (carRoute = JSON.parse(carRoute),
                L.polyline(carRoute, {
                    color: "#1fbad6"
                }).addTo(o))
            }
            ))
        }
    },
    worldmap: function() {
        var e = document.getElementById("worldmap")
          , t = document.createElement("link");
        t.href = "/js/leaflet.markercluster.js",
        t.rel = "preload",
        t.as = "script",
        document.head.appendChild(t),
        e && (vanilla.loadCSS("/css/leaflet.css"),
        vanilla.loadCSS("/css/MarkerCluster.css"),
        vanilla.loadCSS("/css/MarkerCluster.Default.css"),
        vanilla.loadJS("/js/leaflet.js", (function() {
            vanilla.loadJS("/js/leaflet.markercluster.js", (function() {
                var t = L.map(e, {
                    preferCanvas: !0,
                    scrollWheelZoom: !1
                }).setView([0, 0], 2);
                function a(e) {
                    window.location.href = "/cities/" + e.target.slug
                }
                L.tileLayer("https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.{ext}", {
                    attribution: '<a href="https://stamen.com/" rel="nofollow">Stamen Design</a>, <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                    subdomains: "abcd",
                    minZoom: 0,
                    maxZoom: 16,
                    ext: "png"
                }).addTo(t),
                t.setView([0, 0], vanilla.screenWidth > 768 ? 2 : 1, !0),
                fetch("/api/worldmap").then((e=>e.json())).then((e=>{
                    for (var n = L.markerClusterGroup(), o = L.icon({
                        iconUrl: "/img/taxi.svg",
                        iconSize: [32, 32],
                        iconAnchor: [16, 16],
                        popupAnchor: [0, -10]
                    }), i = 0; i < e.length; i++) {
                        var r = L.marker(new L.LatLng(e[i][2],e[i][3]), {
                            title: e[i][0],
                            icon: o
                        });
                        r.bindTooltip(e[i][0]),
                        r.on("click", a),
                        r.slug = e[i][1],
                        n.addLayer(r)
                    }
                    t.addLayer(n)
                }
                )).catch((e=>console.error(e)))
            }
            ))
        }
        )))
    },
    nearby: function() {
        var e = document.getElementById("nearby");
        if (!e)
            return !1;
        var t = e.getAttribute("data-geo");
        fetch("/api/nearby?geo=" + t).then((e=>e.json())).then((t=>{
            for (var a = "", n = 0; n < t.length; n++)
                a += '<li><a href="/cities/' + t[n].slug + '">' + t[n].name + "</a> <small>(" + t[n].distance.mi + " mi / " + t[n].distance.km + " km)</small></li>";
            t.length > 0 && (e.innerHTML = a)
        }
        )).catch((e=>console.log(e)))
    },
    chart: function() {
        var e = document.getElementById("chart");
        if (e)
            if ("IntersectionObserver"in window)
                new IntersectionObserver((function(e, t) {
                    e.forEach((function(e) {
                        e.isIntersecting && (a(e.target),
                        t.unobserve(e.target))
                    }
                    ))
                }
                ),{
                    root: null,
                    rootMargin: "0px",
                    threshold: 0
                }).observe(e);
            else
                for (var t = 0; t < e.length; t++)
                    a(e[t]);
        function a(e) {
            if (!chartData)
                return !1;
            chartData = JSON.parse(chartData),
            vanilla.loadJS("/js/chart.js", (function() {
                new Chart(document.getElementById("chart"),{
                    type: "line",
                    data: {
                        labels: chartData.dates,
                        datasets: [{
                            backgroundColor: "rgb(29, 182, 208)",
                            borderColor: "rgb(29, 182, 208)",
                            data: chartData.rates,
                            tension: .2
                        }]
                    },
                    options: {
                        responsive: !0,
                        maintainAspectRatio: !1,
                        animation: !1,
                        interaction: {
                            intersect: !1
                        },
                        plugins: {
                            legend: {
                                display: !1
                            }
                        }
                    }
                })
            }
            ))
        }
    },
    getyourguide: function() {
        var e = document.getElementById("getyourguide");
        if (e) {
            var t = document.createElement("link");
            if (t.href = "https://widget.getyourguide.com",
            t.rel = "preconnect",
            document.head.appendChild(t),
            "IntersectionObserver"in window) {
                var a = new IntersectionObserver((function(e, t) {
                    e.length > 0 && e[0].isIntersecting && (n(),
                    a.disconnect())
                }
                ),{
                    root: null,
                    rootMargin: "0px",
                    threshold: 0
                });
                a.observe(e)
            } else
                n();
            function n() {
                vanilla.loadJS("https://widget.getyourguide.com/v2/widget.js")
            }
        }
    }
};
vanilla.init();
